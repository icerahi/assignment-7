import type { Prisma } from '@prisma/client';
import * as z from 'zod';
import { WorkExperienceWhereInputObjectSchema as WorkExperienceWhereInputObjectSchema } from './objects/WorkExperienceWhereInput.schema';
import { WorkExperienceOrderByWithAggregationInputObjectSchema as WorkExperienceOrderByWithAggregationInputObjectSchema } from './objects/WorkExperienceOrderByWithAggregationInput.schema';
import { WorkExperienceScalarWhereWithAggregatesInputObjectSchema as WorkExperienceScalarWhereWithAggregatesInputObjectSchema } from './objects/WorkExperienceScalarWhereWithAggregatesInput.schema';
import { WorkExperienceScalarFieldEnumSchema } from './enums/WorkExperienceScalarFieldEnum.schema';
import { WorkExperienceCountAggregateInputObjectSchema as WorkExperienceCountAggregateInputObjectSchema } from './objects/WorkExperienceCountAggregateInput.schema';
import { WorkExperienceMinAggregateInputObjectSchema as WorkExperienceMinAggregateInputObjectSchema } from './objects/WorkExperienceMinAggregateInput.schema';
import { WorkExperienceMaxAggregateInputObjectSchema as WorkExperienceMaxAggregateInputObjectSchema } from './objects/WorkExperienceMaxAggregateInput.schema';
import { WorkExperienceAvgAggregateInputObjectSchema as WorkExperienceAvgAggregateInputObjectSchema } from './objects/WorkExperienceAvgAggregateInput.schema';
import { WorkExperienceSumAggregateInputObjectSchema as WorkExperienceSumAggregateInputObjectSchema } from './objects/WorkExperienceSumAggregateInput.schema';

export const WorkExperienceGroupBySchema: z.ZodType<Prisma.WorkExperienceGroupByArgs> = z.object({ where: WorkExperienceWhereInputObjectSchema.optional(), orderBy: z.union([WorkExperienceOrderByWithAggregationInputObjectSchema, WorkExperienceOrderByWithAggregationInputObjectSchema.array()]).optional(), having: WorkExperienceScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(WorkExperienceScalarFieldEnumSchema), _count: z.union([ z.literal(true), WorkExperienceCountAggregateInputObjectSchema ]).optional(), _min: WorkExperienceMinAggregateInputObjectSchema.optional(), _max: WorkExperienceMaxAggregateInputObjectSchema.optional(), _avg: WorkExperienceAvgAggregateInputObjectSchema.optional(), _sum: WorkExperienceSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.WorkExperienceGroupByArgs>;

export const WorkExperienceGroupByZodSchema = z.object({ where: WorkExperienceWhereInputObjectSchema.optional(), orderBy: z.union([WorkExperienceOrderByWithAggregationInputObjectSchema, WorkExperienceOrderByWithAggregationInputObjectSchema.array()]).optional(), having: WorkExperienceScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(WorkExperienceScalarFieldEnumSchema), _count: z.union([ z.literal(true), WorkExperienceCountAggregateInputObjectSchema ]).optional(), _min: WorkExperienceMinAggregateInputObjectSchema.optional(), _max: WorkExperienceMaxAggregateInputObjectSchema.optional(), _avg: WorkExperienceAvgAggregateInputObjectSchema.optional(), _sum: WorkExperienceSumAggregateInputObjectSchema.optional() }).strict();